from adafruit_servokit import ServoKit
import math
import threading
import time
from evdev import InputDevice, categorize, ecodes
# Путь к устройству геймпада
device_path = "/dev/input/event9"
# Подключение к устройству
try:
    gamepad = InputDevice(device_path)
    print(f"Подключено к устройству: {gamepad.name}")
except FileNotFoundError:
    print(f"Устройство {device_path} не найдено!")
    exit()
# Инициализация ServoKit
kit = ServoKit(channels=3)
kit.servo[0].angle = 120
kit.servo[1].angle = 90
kit.servo[2].angle = 60
# Флаг для управления потоками
stop_threads = False
# Флаг для определения состояния движения
is_moving = False
def moving_forward():
    global is_moving
    is_moving = True
    control_multiple_servos(120, 90, 90, 90, 130, 60, 0.5)
    control_multiple_servos(90, 130, 60, 70, 90, 90, 0.5)
    control_multiple_servos(70, 90, 90, 120, 90, 90, 1)
    is_moving = False
def moving_backward():
    global is_moving
    is_moving = True
    control_multiple_servos(60, 40, 60, 90, 90, 90, 1)
    control_multiple_servos(90, 90, 90, 120, 40, 60, 1)
    is_moving = False
def stop_moving():
    global is_moving
    if is_moving:
        print("Остановка движения") 
        is_moving = False
def control_multiple_servos(ang1_start, ang2_start, ang3_start, ang1_end, ang2_end, ang3_end, t):
    servos = [
        (0, ang1_start, ang1_end, t, 15),
        (1, ang2_start, ang2_end, t, 50),
        (2, ang3_start, ang3_end, t, 50)]
    threads = []
    for servo in servos:
        channel, start_angle, end_angle, duration, steps = servo
        thread = threading.Thread(target=smooth_move, args=(channel, start_angle, end_angle, duration, steps))
        thread.daemon = True
        threads.append(thread)
        thread.start()
    for thread in threads:
        thread.join()
# Функция для установки угла сервопривода
def set_angle(channel, angle):
    kit.servo[channel].angle = angle
# Функция для плавного перемещения сервопривода
def smooth_move(channel, start_angle, end_angle, duration, steps):
    if (start_angle != end_angle):
        time_per_step = duration / steps
        for i in range(steps + 1):
            if stop_threads:
                break
            t = i / steps
            ease_t = 0.5 * (1 - math.cos(t * math.pi))  # Плавное ускорение и замедление
            angle = start_angle + ease_t * (end_angle - start_angle)
            set_angle(channel, angle)
            time.sleep(time_per_step)

# Функция для управления сервоприводами на основе событий геймпада
def control_servos_with_gamepad():
    global stop_threads
    while not stop_threads:
        for event in gamepad.read_loop():
            if stop_threads:
                break
            if event.type == ecodes.EV_ABS:
                if event.code == 1:  # Ось X
                    if event.value < 50:
                        print("Движение вперед")
                        moving_forward()
                    elif event.value > 180:
                        print("Движение назад")
                        moving_backward()
                    elif 50 <= event.value <= 180:  # Нейтральное положение
            stop_moving()
            elif event.type == ecodes.EV_KEY:
                if event.code == 304 and event.value == 1:  # Кнопка A
                    print("Кнопка A нажата")
             # Дополнительные действия для кнопки A
                elif event.code == 305 and event.value == 1:  # Кнопка B
                    print("Кнопка B нажата")
             # Дополнительные действия для кнопки B

gamepad_thread = threading.Thread(target=control_servos_with_gamepad)
gamepad_thread.daemon = True
gamepad_thread.start()
try:
    while True:
        time.sleep(0.5)  
except KeyboardInterrupt:
    print("Программа завершена пользователем.")
    stop_threads = True
    gamepad_thread.join()  # Ожидание завершения потока
